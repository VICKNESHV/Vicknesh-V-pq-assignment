/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.payconiq.stocks.api;

import com.payconiq.stocks.model.StatusMessageResponse;
import com.payconiq.stocks.model.StockRequest;
import com.payconiq.stocks.model.StockResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-17T22:47:13.145+05:30")

@Validated
@Api(value = "stocks", description = "the stocks API")
@RequestMapping(value = "/api")
public interface StocksApi {

    @ApiOperation(value = "Add a stock to the inventory", nickname = "createStock", notes = "Add a stock to the inventory", response = StatusMessageResponse.class, tags={ "stocks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = StatusMessageResponse.class),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/stocks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<StatusMessageResponse> createStock(@ApiParam(value = "Request to add a stock to the inventory" ,required=true )  @Valid @RequestBody StockRequest stock);


    @ApiOperation(value = "Delete a stock by cusipID", nickname = "deleteStockBycusipId", notes = "Delete a stock", response = StatusMessageResponse.class, tags={ "stocks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service request was processed successfully.", response = StatusMessageResponse.class),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/stocks/{cusipiD}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<StatusMessageResponse> deleteStockBycusipId(@ApiParam(value = "cusipId of the stock",required=true) @PathVariable("cusipiD") String cusipiD);


    @ApiOperation(value = "Find stock by cusipID", nickname = "getStockBycusipId", notes = "Returns a stock", response = StockResponse.class, tags={ "stocks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service request was processed successfully.", response = StockResponse.class),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/stocks/{cusipiD}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StockResponse> getStockBycusipId(@ApiParam(value = "cusipId of the stock",required=true) @PathVariable("cusipiD") String cusipiD);


    @ApiOperation(value = "Returns stocks from the inventories", nickname = "getStocks", notes = "Returns the list of stocks", response = StockResponse.class, responseContainer = "List", tags={ "stocks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service request was processed successfully.", response = StockResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/stocks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<StockResponse>> getStocks();


    @ApiOperation(value = "Update stock by cusipID", nickname = "updateStockBycusipId", notes = "Update a stock", response = StatusMessageResponse.class, tags={ "stocks", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service request was processed successfully.", response = StatusMessageResponse.class),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/stocks/{cusipiD}",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<StatusMessageResponse> updateStockBycusipId(@ApiParam(value = "cusipId of the stock",required=true) @PathVariable("cusipiD") String cusipiD,@ApiParam(value = "Request to add a stock to the inventory" ,required=true )  @Valid @RequestBody StockRequest stock);

}
